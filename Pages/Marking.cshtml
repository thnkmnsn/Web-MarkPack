@page
@model MarkPackReport.Pages.MarkingModel
@{
    ViewData["Title"] = "Marking";
}
@section Scripts
{

    <!-- DownloadExcel -->
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script>
        document.getElementById("downloadExcel").addEventListener("click", function () {
            const table = document.querySelector("table"); // สมมุติใช้ตารางแรก
            const worksheet = XLSX.utils.table_to_sheet(table, { raw: true });

            const range = XLSX.utils.decode_range(worksheet['!ref']);

            for (let R = range.s.r + 1; R <= range.e.r; ++R) {
                // MFGNo (column 0) → string
                const mfgCell = worksheet[XLSX.utils.encode_cell({ r: R, c: 0 })];
                if (mfgCell) {
                    mfgCell.t = 's';
                    mfgCell.v = mfgCell.v.toString();
                }

                const productNameCell = worksheet[XLSX.utils.encode_cell({ r: R, c: 1 })];
                if (productNameCell) {
                    productNameCell.t = 's';
                    productNameCell.v = productNameCell.v.toString();
                }

                // InputQty (column 3) → number
                const inputQtyCell = worksheet[XLSX.utils.encode_cell({ r: R, c: 2 })];
                if (inputQtyCell) {
                    const num = Number(inputQtyCell.v.toString().replace(/,/g, ''));
                    if (!isNaN(num)) {
                        inputQtyCell.t = 'n';
                        inputQtyCell.v = num;
                    }
                }
            }

            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Marking_Data");

            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            const fileName = `Marking_${yyyy}-${mm}-${dd}.xlsx`;

            XLSX.writeFile(workbook, fileName);
        });
    </script>
    <!--End DownloadExcel -->
    <script>
        function cleardata() {
            document.getElementById("StartDate").value = "";
            document.getElementById("EndDate").value = "";
            document.getElementById("Search").value = "";
            document.getElementById("ProductName").value = "";

            // submit ฟอร์มเดียว หลังจากล้างข้อมูล
            document.querySelector("form").submit();
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const productInput = document.getElementById("ProductName");
            const suggestionBox = document.getElementById("suggestions");
            const form = document.getElementById("searchForm");

            productInput.addEventListener("input", function () {
                const query = this.value;

                if (query.length >= 1) {
                    fetch(`?handler=SearchProductName&term=${encodeURIComponent(query)}`)
                        .then(res => res.json())
                        .then(data => {
                            let html = "";

                            if (data.length === 0) {
                                html = "<div class='item'>No Product Name</div>";
                            } else {
                                data.forEach(item => {
                                    html += `<div class="item" data-name="${item.productName}">${item.productName}</div>`;
                                });
                            }

                            suggestionBox.innerHTML = html;
                            suggestionBox.style.display = "block";
                        });
                } else {
                    suggestionBox.style.display = "none";
                }
            });

            suggestionBox.addEventListener("click", function (e) {
                if (e.target && e.target.classList.contains("item")) {
                    const selectedName = e.target.textContent.trim();
                    productInput.value = selectedName;
                    suggestionBox.style.display = "none";
                }
            });

            // productInput.addEventListener("blur", function () {
            //     setTimeout(() => {
            //         suggestionBox.style.display = "none";
            //     }, 200);
            // });
        });
    </script>
    }

<style>
    .suggestion-box {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        border: 1px solid #ccc;
        background-color: #fff;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

        .suggestion-box .item {
            padding: 8px 10px;
            cursor: pointer;
        }

            .suggestion-box .item:hover {
                background-color: #f0f0f0;
            }
</style>

<div style="text-align: center; padding-top: 30px;">
    <h1 style="font-family: Comic Sans MS; color: #33aaff;">Marking Process</h1>
</div>
<p></p>
<form method="get" style="text-align:center; margin-bottom:20px;">

    <label style="font-weight: bold; font-size: 18px;">Start Date :</label>
    <input type="date" id="StartDate" name="StartDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />

    <label style="font-weight: bold; font-size: 18px;">End Date :</label>
    <input type="date" id="EndDate" name="EndDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />


    <label style="font-weight:bold; font-size:18px;">MFGNo.</label>
    <input type="text" id="Search" name="Search" style="width: 95px;" value="@Model.Search" />

    <label style="font-weight: bold; font-size: 18px;">ProductName :</label>
    <div style="position: relative; display: inline-block;">
        <input type="text" id="ProductName" name="ProductName" autocomplete="off" style="width: 300px;" value="@Model.ProductName" />
        <div id="suggestions" class="suggestion-box"></div>
    </div>

    <div style="text-align: right; margin: 20px 50px;">
        <button type="submit" style="margin-left:10px; font-weight:bold; font-family:Comic Sans MS; border-radius: 15px; padding: 10px;">
            Search
            <img src="/images/search.png" alt="Search" width="25" />
        </button>

        <button type="button" style="margin-left:10px; font-weight:bold; font-family:Comic Sans MS; border-radius: 15px; padding: 10px;" onclick="cleardata()">
            Clear
            <img src="/images/clear.png" alt="clear" width="25" />
        </button>
    </div>
</form>

<div style="text-align: right; margin: 20px 50px;">
    <button id="downloadExcel" style="background-color: lightgray; padding: 10px; border-radius: 10px; font-family: Comic Sans MS; border: none; cursor: pointer;">
        <img src="/images/excel.png" width="30" style="vertical-align: middle;" />
        <span style="color: green; font-weight: bold;">Download</span>
    </button>
</div>

<style>
    /* ซ่อนคอลัมน์ Created Date ในหน้าเว็บ */
    .col-created-date {
        display: none;
    }
</style>


<table style="width: 95%; margin: auto; border-collapse: collapse; font-family: Comic Sans MS;">
    <thead>
        <tr style="background-color: #e0e0e0;">
            <th style="border: 1px solid #aaa; padding: 8px;">MFG</th>
            <th style="border: 1px solid #aaa; padding: 8px;">ProductName</th>
            <th style="border: 1px solid #aaa; padding: 8px;">Qty</th>
            <th class="col-created-date" style="border: 1px solid #aaa; padding: 8px;">Created Date</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.AppBoxMarkingTracking != null && Model.AppBoxMarkingTracking.Any() &&
           (!string.IsNullOrEmpty(Model.Search) ||
!string.IsNullOrEmpty(Model.ProductName) ||
         Model.StartDate.HasValue ||
         Model.EndDate.HasValue))
        {
            foreach (var item in Model.AppBoxMarkingTracking)
            {
                <tr>
                    <td style="border: 1px solid #ccc;">@item.MFG</td>
                    <td style="border: 1px solid #ccc;">@item.ProductName</td>
                    <td style="border: 1px solid #ccc; text-align: center;">@item.InputQty</td>
                    <td class="col-created-date" style="border: 1px solid #ccc;">@item.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        }
        else if (!string.IsNullOrEmpty(Model.Search) ||
         !string.IsNullOrEmpty(Model.ProductName) ||
         Model.StartDate.HasValue ||
         Model.EndDate.HasValue)
        {
            <tr>
                <td colspan="8" style="text-align:center; color:red;">No data found</td>
            </tr>
        }
    </tbody>
</table>
